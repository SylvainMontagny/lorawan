[
    {
        "id": "bc3747d8d2818125",
        "type": "subflow",
        "name": "Do nothing",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "7c77abfa015940a1"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7c77abfa015940a1",
        "type": "function",
        "z": "bc3747d8d2818125",
        "name": "Warn",
        "func": "node.warn(\"'valve setpoint' et 'controler setpoint' sont Ã©gaux, on n'envoie donc pas de downlink\");",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6d8f4dd34d3c0968",
        "type": "tab",
        "label": "Process LoRa-BACnet",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae79c090fb190ae7",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "name": "MQTT IN",
        "style": {
            "stroke": "#000000",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fa6a8beb0613d3a7",
            "8f8c9f11bcac548e",
            "bd5242f2124ad28a",
            "979a0dc2a52984ee"
        ],
        "x": 94,
        "y": 559,
        "w": 372,
        "h": 182
    },
    {
        "id": "b49541af9b86a17d",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "ca17678c24316aa3",
        "name": "Variable globale",
        "style": {
            "stroke": "#ffff00",
            "fill": "#ffffbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4a274d048ad48413",
            "60b0b6c20bc482bc"
        ],
        "x": 534,
        "y": 419,
        "w": 392,
        "h": 82
    },
    {
        "id": "ab13df5c0c447733",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "ca17678c24316aa3",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f16acf6db595ce16",
            "d84572e75538829c"
        ],
        "x": 594,
        "y": 319,
        "w": 272,
        "h": 82
    },
    {
        "id": "427c6c6436a2584b",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "name": "BACnet",
        "style": {
            "stroke": "#0070c0",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ae4f9c9047df6473",
            "1dd8e3993145818d",
            "38cf35368770b50b",
            "3d62a7f7e178afc2",
            "2c04cb87d441131d",
            "bdb85e766512a0b8",
            "a350ba7d5dad9261",
            "335bd4bd8d05919b",
            "75c82957c6914b08",
            "1f5a604bf63586be",
            "36cfa1fcde609111",
            "bb9b71f30b74b7c3",
            "33fe74da7b07405e"
        ],
        "x": 1008,
        "y": 593,
        "w": 2884,
        "h": 308
    },
    {
        "id": "d87567def4b1e622",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "name": "HTTP",
        "style": {
            "stroke": "#ffC000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "67adf1fa439cc319",
            "54bcdeececa54a32",
            "58f7eebc47dea4f9",
            "bf20b209e56c184b",
            "21c3bc95d788186a",
            "0d92c512e8ea6e8d",
            "5e66b51fb4bedb93",
            "7a6bce99815b07ef",
            "8301bb284abdeed5",
            "de98406a3e080073",
            "9c8cf2eae985a2e5",
            "2dc9505f0fe9848a",
            "ca3b22cd07410a52",
            "f1d9eee2fd1c3844",
            "2c96e9bf561e4cfa",
            "ffa2d178474c6fb6"
        ],
        "x": 1008,
        "y": 113,
        "w": 3184,
        "h": 448
    },
    {
        "id": "3b6b26d985df825b",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "name": "Room simulator (BACnet only)",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bf74b0f1b23e70ac",
            "223e20ed37128222",
            "06b064b489aaccbb",
            "1d640568402dc278",
            "231f17d1360ada6d",
            "7297e49e8a120a5c",
            "6c5aed84568084c1",
            "573c486199f582ea",
            "b9dc96c245a1f3dd",
            "342b312ee2628ed5",
            "eab7e3b7ab2afc10",
            "f284deb4b7a72166",
            "729fc0e83c253a00",
            "fb056b39aaa705a8"
        ],
        "x": 1008,
        "y": 933,
        "w": 2884,
        "h": 334
    },
    {
        "id": "bf20b209e56c184b",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "HTTP POST",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4866b35aa0a1245a",
            "9cfc51e02c81cd04",
            "fa6e674c01db3c09",
            "86a7b11d3b9f1439",
            "bcbeeaa5130ab58e"
        ],
        "x": 1034,
        "y": 299,
        "w": 692,
        "h": 122
    },
    {
        "id": "7a6bce99815b07ef",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "HTTP CREATE",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3ee7bab0c4b29da0",
            "0c8c780c10db7d45",
            "7ec9af7e9b3be552",
            "bb866ad617858868",
            "4497b1f5aeed2e42",
            "57792278fd3c6602",
            "08a4ee86e1e903ed",
            "52d3ad37a32f5cf1"
        ],
        "x": 2014,
        "y": 139,
        "w": 572,
        "h": 222
    },
    {
        "id": "21c3bc95d788186a",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "HTTP GET command",
        "style": {
            "stroke": "#ffC000",
            "label": true,
            "color": "#000000",
            "fill": "#ffefbf"
        },
        "nodes": [
            "4b0208711347706d",
            "07780107933bc067"
        ],
        "x": 2014,
        "y": 399,
        "w": 512,
        "h": 82
    },
    {
        "id": "0d92c512e8ea6e8d",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "HTTP PUSH JSON",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6546b252c32ab8cc",
            "abec42f3186a1292",
            "c52294ce99f014a0"
        ],
        "x": 2894,
        "y": 359,
        "w": 632,
        "h": 82
    },
    {
        "id": "5e66b51fb4bedb93",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "MQTT TTS OUT",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "93e0cc5a019dce53"
        ],
        "x": 3754,
        "y": 299,
        "w": 192,
        "h": 82
    },
    {
        "id": "3d62a7f7e178afc2",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "BACnet WRITE",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e1287780d9f7d791",
            "6585cd8150b872c4",
            "91baa8f0abaf519d",
            "e85a3670f8b5cee2",
            "d644903c6c437fc0"
        ],
        "x": 1034,
        "y": 679,
        "w": 632,
        "h": 122
    },
    {
        "id": "2c04cb87d441131d",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "BACnet READ command",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b0ede0293bae4f6a",
            "f58d25d806e09e72"
        ],
        "x": 1714,
        "y": 719,
        "w": 472,
        "h": 82
    },
    {
        "id": "bdb85e766512a0b8",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "BACnet PUSH JSON",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a92965f245eb41cc",
            "7869939405218dea",
            "d3084608553b7d21"
        ],
        "x": 2554,
        "y": 679,
        "w": 672,
        "h": 82
    },
    {
        "id": "de98406a3e080073",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "MQTT CHIRP OUT",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bb18855e646ed641",
            "78db7f24896c8102"
        ],
        "x": 3754,
        "y": 419,
        "w": 412,
        "h": 82
    },
    {
        "id": "335bd4bd8d05919b",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "MQTT TTS OUT",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c9d90c1fa8711f27"
        ],
        "x": 3454,
        "y": 619,
        "w": 192,
        "h": 82
    },
    {
        "id": "75c82957c6914b08",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "MQTT CHIRP OUT",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "73d1439a22bc2bbe",
            "ec9520909e7a04e3"
        ],
        "x": 3454,
        "y": 739,
        "w": 412,
        "h": 82
    },
    {
        "id": "1d640568402dc278",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "BACnet WRITE",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8dad14fda06315b6",
            "a18e6b6d389ed7cb",
            "f6b13807e69d2846",
            "4e1f58811f19c931",
            "5e9fd5c64910baf0"
        ],
        "x": 1034,
        "y": 1019,
        "w": 632,
        "h": 122
    },
    {
        "id": "231f17d1360ada6d",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "BACnet READ command",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "dad3b556821c3f1b",
            "a4b37139d76c75a4"
        ],
        "x": 1714,
        "y": 1059,
        "w": 472,
        "h": 82
    },
    {
        "id": "7297e49e8a120a5c",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "BACnet PUSH JSON",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "02ac2e54245339a7",
            "f5a5b22958e2eda9",
            "65031ccc2f06e0fc"
        ],
        "x": 2554,
        "y": 1019,
        "w": 672,
        "h": 82
    },
    {
        "id": "573c486199f582ea",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "MQTT TTS OUT",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ad603adc6e67542c"
        ],
        "x": 3454,
        "y": 959,
        "w": 192,
        "h": 82
    },
    {
        "id": "b9dc96c245a1f3dd",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "MQTT CHIRP OUT",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f1252defa33c0f31",
            "9b5837d03a0cdbdf"
        ],
        "x": 3454,
        "y": 1079,
        "w": 412,
        "h": 82
    },
    {
        "id": "342b312ee2628ed5",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "Room simultor instance",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "409bcba310b9a78a",
            "a8bc415f09eed42f"
        ],
        "x": 1034,
        "y": 1159,
        "w": 452,
        "h": 82
    },
    {
        "id": "ca17678c24316aa3",
        "type": "group",
        "z": "6d8f4dd34d3c0968",
        "name": "Initialization",
        "style": {
            "stroke": "#ff0000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a703bc63b4fecfba",
            "3eb902813fa56602",
            "b49541af9b86a17d",
            "ab13df5c0c447733"
        ],
        "x": 494,
        "y": 293,
        "w": 458,
        "h": 348
    },
    {
        "id": "fa6a8beb0613d3a7",
        "type": "mqtt in",
        "z": "6d8f4dd34d3c0968",
        "g": "ae79c090fb190ae7",
        "name": "mqtt",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b652fd442e5e028b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 600,
        "wires": [
            [
                "8f8c9f11bcac548e",
                "bd5242f2124ad28a"
            ]
        ]
    },
    {
        "id": "8f8c9f11bcac548e",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "ae79c090fb190ae7",
        "name": "uplink filter",
        "func": "if((global.get('g_networkserver') == \"tts\") && (msg.payload.uplink_message != null)){         //for tts\n    return msg;\n}\nelse if ((global.get('g_networkserver') == \"chirpstack\") && (msg.payload.fCnt != null)){      //for chirpstack\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "979a0dc2a52984ee",
                "4a274d048ad48413",
                "3eb902813fa56602"
            ]
        ]
    },
    {
        "id": "bd5242f2124ad28a",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "ae79c090fb190ae7",
        "name": "debug raw mqtt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 700,
        "wires": []
    },
    {
        "id": "979a0dc2a52984ee",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "ae79c090fb190ae7",
        "name": "debug filter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 660,
        "wires": []
    },
    {
        "id": "4a274d048ad48413",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "b49541af9b86a17d",
        "name": "Global var",
        "func": "//FUNCTION\nconst deleteLeftMost = (strinput, strdelete) => {\n    let changedStr = strinput.replace(strdelete, \"\");\n    return changedStr;\n};\n\nconst addRightMost = (strinput, stradd) => {\n    let changeStr = strinput+stradd;\n    return changeStr; \n};\n\nconst createTopicDownlink = (strTopic, strUplink, strDownlink) => {\n    let changeStr = addRightMost(deleteLeftMost(strTopic, strUplink), strDownlink);\n    return changeStr; //We delete the uplink suffix then add the downlink suffix in order to create the downlink topic\n};\n//------\n\n\n\n//for tts\nif(global.get('g_networkserver') == \"tts\"){\n    //Set the device number, in order to create instances\n    let name = msg.payload.end_device_ids.device_id;\n    let num = deleteLeftMost(name, global.get('g_devPrefix'));\n    global.set('g_numDev', num);\n    //Set the device BACnet instances\n    global.set('g_AV1_valvesetpoint', addRightMost(num, \"1\"));\n    global.set('g_AV2_valvetemperature', addRightMost(num, \"2\"));\n    global.set('g_AV3_controlersetpoint', addRightMost(num, \"3\"));\n    //Set the topic for downlink\n    let topicUp = msg.topic;\n    let topicDown = createTopicDownlink(topicUp, global.get('g_tts_topicUplinkSuffix'), global.get('g_tts_topicDownlinkSuffix'));\n    global.set('g_topicDownlink', topicDown);\n    //Set the setpoint\n    global.set('g_valvesetpoint', msg.payload.uplink_message.decoded_payload.setpoint);\n}\n\n//for chirpstack\nelse if(global.get('g_networkserver') == \"chirpstack\"){\n    //Set the device number, in order to create instances\n    let name = msg.payload.deviceInfo.deviceName;\n    let num = deleteLeftMost(name, global.get('g_devPrefix'));\n    global.set('g_numDev', num);\n    //Set the device BACnet instances\n    global.set('g_AV1_valvesetpoint', addRightMost(num, \"1\"));\n    global.set('g_AV2_valvetemperature', addRightMost(num, \"2\"));\n    global.set('g_AV3_controlersetpoint', addRightMost(num, \"3\"));\n    //Set the topic for downlink\n    let topicUp = msg.topic;\n    let topicDown = createTopicDownlink(topicUp, global.get('g_chirp_topicUplinkSuffix'), global.get('g_chirp_topicDownlinkSuffix'));\n    global.set('g_topicDownlink', topicDown);\n    //Set the setpoint\n    global.set('g_valvesetpoint', msg.payload.object.setpoint);\n    //Set the devEui in order to flush the queue\n    global.set('g_chirp_devEui', msg.payload.deviceInfo.devEui);\n}\n\n\n\n\n//for debug purpose\nvar test = {\n    \"num\": global.get('g_numDev'),\n    \"AV1_vsp\": global.get('g_AV1_valvesetpoint'),\n    \"AV2_vtm\": global.get('g_AV2_valvetemperature'),\n    \"AV3_csp\": global.get('g_AV3_controlersetpoint'),\n    \"topic\": global.get('g_topicDownlink'),\n    \"setpoint\": global.get('g_valvesetpoint'),\n    \"server\": global.get('g_networkserver'),\n    \"interface\": global.get('g_interface'),\n    \"application\": global.get('g_application')\n}\nreturn test;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "60b0b6c20bc482bc"
            ]
        ]
    },
    {
        "id": "60b0b6c20bc482bc",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "b49541af9b86a17d",
        "name": "debug varg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "a703bc63b4fecfba",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "ca17678c24316aa3",
        "name": "HTTP/BACnet",
        "property": "g_interface",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "http",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bacnet",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 560,
        "wires": [
            [
                "bcbeeaa5130ab58e"
            ],
            [
                "91baa8f0abaf519d"
            ]
        ]
    },
    {
        "id": "4866b35aa0a1245a",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "bf20b209e56c184b",
        "name": "Request POST valve setpoint",
        "func": "//global\nlet instance = global.get('g_AV1_valvesetpoint');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\nlet server = global.get('g_networkserver');\n\n//get value from the input\nlet value;\nif (server == \"tts\") {\n    value = msg.payload.uplink_message.decoded_payload.setpoint;\n}\nelse if (server == \"chirpstack\") {\n    value = msg.payload.object.setpoint;\n}\nelse {\n    value = null;\n}\n\n//creating the url for http request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/analog-values/\"+instance;\n\n//creating the request\nvar request = {\n    \"method\": \"POST\",\n    \"payload\": { \"present-value\": value },\n    \"url\": url,\n    \"headers\": {\n        Authorization: akey,\n        ContentType: \"application/json\"\n    }\n};\nnode.warn(\"Ecriture de la temperature et du setpoint dans nos objets BACnet\");\nreturn request;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 380,
        "wires": [
            [
                "fa6e674c01db3c09",
                "ffa2d178474c6fb6"
            ]
        ]
    },
    {
        "id": "9cfc51e02c81cd04",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "bf20b209e56c184b",
        "name": "Request POST temperature",
        "func": "//global\nlet instance = global.get('g_AV2_valvetemperature');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\nlet server = global.get('g_networkserver');\n\n//get value from the input\nlet value;\nif(server == \"tts\"){\n    value = msg.payload.uplink_message.decoded_payload.temperature;\n}\nelse if(server == \"chirpstack\"){\n    value = msg.payload.object.temperature;\n}\nelse{\n    value = null;\n}\n\n//creating the url for http request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/analog-values/\"+instance;\n\n//creating the request\nvar request = {\n    \"method\": \"POST\",\n    \"payload\":{\"present-value\": value},\n    \"url\": url,\n    \"headers\": {Authorization: akey,\n                ContentType: \"application/json\"}\n};\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 340,
        "wires": [
            [
                "86a7b11d3b9f1439",
                "ffa2d178474c6fb6"
            ]
        ]
    },
    {
        "id": "fa6e674c01db3c09",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "bf20b209e56c184b",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1610,
        "y": 380,
        "wires": [
            [
                "67adf1fa439cc319"
            ]
        ]
    },
    {
        "id": "86a7b11d3b9f1439",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "bf20b209e56c184b",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "67adf1fa439cc319",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "BACnet Object exist ?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "404",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1860,
        "y": 380,
        "wires": [
            [
                "3ee7bab0c4b29da0",
                "7ec9af7e9b3be552",
                "4497b1f5aeed2e42",
                "2c96e9bf561e4cfa"
            ],
            [
                "4b0208711347706d"
            ]
        ]
    },
    {
        "id": "3ee7bab0c4b29da0",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "Request CREATE valve setpoint",
        "func": "//global\nlet instance = global.get('g_AV1_valvesetpoint');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\nlet numDev = global.get('g_numDev');\n\n//creating url for the request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/add\";\n\nvar request = {\n    \"method\": \"POST\",\n    \"url\": url,\n    \"headers\": {Authorization: akey,\n                ContentType: \"application/json\"},\n    \"payload\":{\n        \"object-type\": \"AnalogValue\",\n        \"instance-number\": Number(instance),\n        \"name\": \"Valve nÂ°\"+numDev+\" setpoint\"\n    }\n};\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 180,
        "wires": [
            [
                "0c8c780c10db7d45"
            ]
        ]
    },
    {
        "id": "0c8c780c10db7d45",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2430,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7ec9af7e9b3be552",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "Request CREATE valve temperature",
        "func": "//global\nlet instance = global.get('g_AV2_valvetemperature');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\nlet numDev = global.get('g_numDev');\n\n//creating url for the request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/add\";\n\nvar request = {\n    \"method\": \"POST\",\n    \"url\": url,\n    \"headers\": {Authorization: akey,\n                ContentType: \"application/json\"},\n    \"payload\":{\n        \"object-type\": \"AnalogValue\",\n        \"instance-number\": Number(instance),\n        \"name\": \"Valve nÂ°\"+numDev+\" temperature\"\n    }\n};\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 220,
        "wires": [
            [
                "bb866ad617858868"
            ]
        ]
    },
    {
        "id": "bb866ad617858868",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4497b1f5aeed2e42",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "Request CREATE controler setpoint",
        "func": "//global\nlet instance = global.get('g_AV3_controlersetpoint');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\nlet numDev = global.get('g_numDev');\n\n//creating url for the request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/add\";\n\nvar request = {\n    \"method\": \"POST\",\n    \"url\": url,\n    \"headers\": {Authorization: akey,\n                ContentType: \"application/json\"},\n    \"payload\":{\n        \"object-type\": \"AnalogValue\",\n        \"instance-number\": Number(instance),\n        \"name\": \"Controler nÂ°\"+numDev+\" setpoint\"\n    }\n};\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 260,
        "wires": [
            [
                "57792278fd3c6602"
            ]
        ]
    },
    {
        "id": "57792278fd3c6602",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2450,
        "y": 260,
        "wires": [
            [
                "08a4ee86e1e903ed"
            ]
        ]
    },
    {
        "id": "08a4ee86e1e903ed",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "Request POST controler setpoint",
        "func": "//global\nlet instance = global.get('g_AV3_controlersetpoint');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\n\n//creating url for the request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/analog-values/\"+instance;\n\nvar request = {\n    \"method\": \"POST\",\n    \"payload\":{\"present-value\": global.get('g_defaultValue')},\n    \"url\": url,\n    \"headers\": {Authorization: akey,\n                ContentType: \"application/json\"}\n};\nnode.warn(\"CrÃ©ation des objets BACnet correspondant Ã  la nouvelle vanne\");\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 320,
        "wires": [
            [
                "52d3ad37a32f5cf1"
            ]
        ]
    },
    {
        "id": "52d3ad37a32f5cf1",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "7a6bce99815b07ef",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4b0208711347706d",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "21c3bc95d788186a",
        "name": "Request GET controler setpoint",
        "func": "//global\nlet instance = global.get('g_AV3_controlersetpoint');\nlet ip = global.get('g_ip');\nlet akey = global.get('g_akey');\n\n//creating url get request\nlet url = \"https://\"+ip+\"/api/rest/v2/services/bacnet/local/objects/analog-values/\"+instance+\"/present-value\";\n\nvar request = {\n    \"method\": \"GET\",\n    \"url\": url,\n    \"headers\": {Authorization: akey}\n};\nnode.warn(\"RÃ©cupÃ©ration du controler setpoint\");\nreturn request;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 440,
        "wires": [
            [
                "07780107933bc067"
            ]
        ]
    },
    {
        "id": "07780107933bc067",
        "type": "http request",
        "z": "6d8f4dd34d3c0968",
        "g": "21c3bc95d788186a",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e133531e8c058541",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2410,
        "y": 440,
        "wires": [
            [
                "54bcdeececa54a32",
                "f1d9eee2fd1c3844"
            ]
        ]
    },
    {
        "id": "54bcdeececa54a32",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "compare valve / controler setpoint",
        "property": "payload.$value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "g_valvesetpoint",
                "vt": "global"
            },
            {
                "t": "eq",
                "v": "g_valvesetpoint",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2700,
        "y": 440,
        "wires": [
            [
                "c52294ce99f014a0",
                "2dc9505f0fe9848a"
            ],
            [
                "58f7eebc47dea4f9",
                "ca3b22cd07410a52"
            ]
        ]
    },
    {
        "id": "58f7eebc47dea4f9",
        "type": "subflow:bc3747d8d2818125",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "",
        "x": 2990,
        "y": 480,
        "wires": []
    },
    {
        "id": "6546b252c32ab8cc",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "0d92c512e8ea6e8d",
        "name": "Creating JSON",
        "func": "let serv = global.get('g_networkserver');\n\nvar json = {};\n//downlink for tts\nif (global.get('g_networkserver')==\"tts\"){\n    json = {\n        \"topic\": global.get('g_topicDownlink'),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": global.get('g_portDownlink'),\n                    \"frm_payload\": msg.payload,\n                    \"priority\": \"NORMAL\"\n                }\n            ]\n        }\n    };\n}\n\n//downlink for chirpstack\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    json = {\n        \"topic\": global.get('g_topicDownlink'),\n        \"payload\": {\n            \"devEui\": global.get('g_chirp_devEui'),\n            \"confirmed\": false,\n            \"fPort\": global.get('g_portDownlink'),\n            \"data\": msg.payload\n        }\n    };\n}\n\nreturn json;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 400,
        "wires": [
            [
                "8301bb284abdeed5",
                "9c8cf2eae985a2e5"
            ]
        ]
    },
    {
        "id": "abec42f3186a1292",
        "type": "base64",
        "z": "6d8f4dd34d3c0968",
        "g": "0d92c512e8ea6e8d",
        "name": "Encode base64",
        "action": "str",
        "property": "payload",
        "x": 3240,
        "y": 400,
        "wires": [
            [
                "6546b252c32ab8cc"
            ]
        ]
    },
    {
        "id": "c52294ce99f014a0",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "0d92c512e8ea6e8d",
        "name": "Creating buffer to encode",
        "func": "//The base64 node need a Buffer type to encode properly\nlet buffervalue = Buffer.from([msg.payload.$value]);\n\nvar payload64 = {\n    \"payload\": buffervalue\n};\nnode.warn(\"'valve setpoint' et 'controler setpoint' sont diffÃ©rents, on envoie un downlink\");\nreturn payload64;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 400,
        "wires": [
            [
                "abec42f3186a1292"
            ]
        ]
    },
    {
        "id": "93e0cc5a019dce53",
        "type": "mqtt out",
        "z": "6d8f4dd34d3c0968",
        "g": "5e66b51fb4bedb93",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d015829937bb8848",
        "x": 3850,
        "y": 340,
        "wires": []
    },
    {
        "id": "e1287780d9f7d791",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "3d62a7f7e178afc2",
        "name": "Write valve temperature",
        "func": "//get value from the input\nlet value;\nif (global.get('g_networkserver') == \"tts\") {\n    value = msg.payload.uplink_message.decoded_payload.temperature;\n}\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    value = msg.payload.object.temperature;\n}\nelse {\n    value = null;\n}\n\nvar changeWrite = {\n    \"payload\": {\n        \"deviceIPAddress\": global.get('g_ip'),\n        \"objectId\": {\n            \"type\": global.get('g_ObjectTypeAnalogValue'),\n            \"instance\": global.get('g_AV2_valvetemperature')\n        },\n        \"propertyId\": global.get('g_propertyType_PresentValue'),\n        \"values\":[\n            {\n                \"type\":global.get('g_propertyType_Real'),\n                \"value\": value\n            }\n        ],\n        \"options\": {}\n    }\n};\nreturn changeWrite;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "6585cd8150b872c4",
                "33fe74da7b07405e"
            ]
        ]
    },
    {
        "id": "6585cd8150b872c4",
        "type": "BACnet-Write",
        "z": "6d8f4dd34d3c0968",
        "g": "3d62a7f7e178afc2",
        "name": "BACnet WRITE",
        "objectType": "0",
        "instance": "7984f7dd585788a9",
        "valueTag": "0",
        "valueValue": "",
        "propertyId": "0",
        "priority": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleWrite": false,
        "x": 1560,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "91baa8f0abaf519d",
        "type": "delay",
        "z": "6d8f4dd34d3c0968",
        "g": "3d62a7f7e178afc2",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 720,
        "wires": [
            [
                "e1287780d9f7d791",
                "e85a3670f8b5cee2"
            ]
        ]
    },
    {
        "id": "e85a3670f8b5cee2",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "3d62a7f7e178afc2",
        "name": "Write valve setpoint",
        "func": "//get value from the input\nlet value;\nif (global.get('g_networkserver') == \"tts\") {\n    value = msg.payload.uplink_message.decoded_payload.setpoint;\n}\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    value = msg.payload.object.setpoint;\n}\nelse {\n    value = null;\n}\n\nvar changeWrite = {\n    \"payload\": {\n        \"deviceIPAddress\": global.get('g_ip'),\n        \"objectId\": {\n            \"type\": global.get('g_ObjectTypeAnalogValue'),\n            \"instance\": global.get('g_AV1_valvesetpoint')\n        },\n        \"propertyId\": global.get('g_propertyType_PresentValue'),\n        \"values\": [\n            {\n                \"type\": global.get('g_propertyType_Real'),\n                \"value\": value\n            }\n        ],\n        \"options\": {}\n    }\n};\nnode.warn(\"Ecriture de la temperature et du setpoint dans nos objets BACnet\");\nreturn changeWrite;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 760,
        "wires": [
            [
                "d644903c6c437fc0",
                "33fe74da7b07405e"
            ]
        ]
    },
    {
        "id": "d644903c6c437fc0",
        "type": "BACnet-Write",
        "z": "6d8f4dd34d3c0968",
        "g": "3d62a7f7e178afc2",
        "name": "BACnet WRITE",
        "objectType": "0",
        "instance": "7984f7dd585788a9",
        "valueTag": "0",
        "valueValue": "",
        "propertyId": "0",
        "priority": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleWrite": false,
        "x": 1560,
        "y": 760,
        "wires": [
            [
                "b0ede0293bae4f6a"
            ]
        ]
    },
    {
        "id": "b0ede0293bae4f6a",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "2c04cb87d441131d",
        "name": "Read controler setpoint",
        "func": "var changeRead = {\n    \"payload\": {\n        \"deviceIPAddress\": global.get('g_ip'),\n        \"objectId\": {\n            \"type\": global.get('g_ObjectTypeAnalogValue'),\n            \"instance\": global.get('g_AV3_controlersetpoint')\n        },\n        \"propertyId\": global.get('g_propertyType_PresentValue'),\n        \"options\": {}\n    }\n};\nnode.warn(\"RÃ©cupÃ©ration du controler setpoint\");\nreturn changeRead;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 760,
        "wires": [
            [
                "f58d25d806e09e72"
            ]
        ]
    },
    {
        "id": "f58d25d806e09e72",
        "type": "BACnet-Read",
        "z": "6d8f4dd34d3c0968",
        "g": "2c04cb87d441131d",
        "name": "BACnet READ",
        "objectType": "0",
        "instance": "7984f7dd585788a9",
        "propertyId": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleRead": false,
        "x": 2080,
        "y": 760,
        "wires": [
            [
                "ae4f9c9047df6473",
                "bb9b71f30b74b7c3"
            ]
        ]
    },
    {
        "id": "ae4f9c9047df6473",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "compare valve / controler setpoint",
        "property": "payload.values[0].value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "g_valvesetpoint",
                "vt": "global"
            },
            {
                "t": "eq",
                "v": "g_valvesetpoint",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2360,
        "y": 760,
        "wires": [
            [
                "d3084608553b7d21",
                "1f5a604bf63586be"
            ],
            [
                "1dd8e3993145818d",
                "36cfa1fcde609111"
            ]
        ]
    },
    {
        "id": "1dd8e3993145818d",
        "type": "subflow:bc3747d8d2818125",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "",
        "x": 2650,
        "y": 800,
        "wires": []
    },
    {
        "id": "a92965f245eb41cc",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "bdb85e766512a0b8",
        "name": "Creating du JSON",
        "func": "let serv = global.get('g_networkserver');\n\nvar json = {};\n//downlink for tts\nif (global.get('g_networkserver')==\"tts\"){\n    json = {\n        \"topic\": global.get('g_topicDownlink'),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": global.get('g_portDownlink'),\n                    \"frm_payload\": msg.payload,\n                    \"priority\": \"NORMAL\"\n                }\n            ]\n        }\n    };\n}\n\n//downlink for chirpstack\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    json = {\n        \"topic\": global.get('g_topicDownlink'),\n        \"payload\": {\n            \"devEui\": global.get('g_chirp_devEui'),\n            \"confirmed\": false,\n            \"fPort\": global.get('g_portDownlink'),\n            \"data\": msg.payload\n        }\n    };\n}\n\nreturn json;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 720,
        "wires": [
            [
                "38cf35368770b50b",
                "a350ba7d5dad9261"
            ]
        ]
    },
    {
        "id": "7869939405218dea",
        "type": "base64",
        "z": "6d8f4dd34d3c0968",
        "g": "bdb85e766512a0b8",
        "name": "Encodeur Base64",
        "action": "str",
        "property": "payload",
        "x": 2910,
        "y": 720,
        "wires": [
            [
                "a92965f245eb41cc"
            ]
        ]
    },
    {
        "id": "d3084608553b7d21",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "bdb85e766512a0b8",
        "name": "Creating buffer to encode",
        "func": "//The base64 node need a Buffer type to encode properly\nlet buffervalue = Buffer.from([msg.payload.values[0].value]);\n\nvar payload64 = {\n    \"payload\": buffervalue\n};\nnode.warn(\"'valve setpoint' et 'controler setpoint' sont diffÃ©rents, on envoie un downlink\");\nreturn payload64;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 720,
        "wires": [
            [
                "7869939405218dea"
            ]
        ]
    },
    {
        "id": "38cf35368770b50b",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "Push JSON MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 640,
        "wires": []
    },
    {
        "id": "f16acf6db595ce16",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "ab13df5c0c447733",
        "name": "TO MODIFY",
        "func": "//////////////////////////////////////////////////\n////////////    TO MODIFY      ///////////////////\n//////////////////////////////////////////////////\n\n// Network Server (choices : \"tts\" - \"chirpstack\")\nlet networkserver = \"chirpstack\";\n\n// LoRaWAN BACnet interface method (choices : \"bacnet\" - \"http\")\nlet interface = \"http\";\n\n// Application (choices : \"roomsimulator\" - \"apexdistech\")\nlet application = \"apexdistech\";\n\n// Variable to Modify \nconst ip = \"192.168.1.139\";             // Controler IP Address\nconst portDownlink = 30;\nconst devPrefix = \"dev-\";             // Device prefix\nconst login = \"admin\";              //Apex distech login\nconst password = \"univ-lorawan\"     //Apex distech password\nconst defaultvalue = 20;    //default value for the setpoint of the valve\nconst chirp_apitoken = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjaGlycHN0YWNrIiwiaXNzIjoiY2hpcnBzdGFjayIsInN1YiI6Ijk1YjBjNGQ2LTkxYmUtNGE2Yi1hMjMwLTFhZjVkYzMwYzBiZSIsInR5cCI6ImtleSJ9.weuxb_HlizQxGJCOnZH4ypQ2rhVI2NxlpBj8RKWWpgk\";\n\n\n\n\n/////////////////////////////////////////////////\n/////////////   DO NOT MODIFY ///////////////////\n/////////////////////////////////////////////////\n\n//Topics\nconst tts_topicDownlinkSuffix = \"/down/replace\";  // Downlink topic suffix for tts\nconst tts_topicUplinkSuffix = \"/up\";  // Uplink topic suffix for tts\nconst chirp_topicDownlinkSuffix = \"/command/down\";  // Downlink topic suffix for chirpstack\nconst chirp_topicUplinkSuffix = \"/event/up\";  // Uplink topic suffix for chirpstack\n\n\n//Autentification key\nlet key = login + \":\" + password;\nlet bufferkey = new Buffer(key);\nconst keybase64 = bufferkey.toString('base64');\nconst autentikey = \"Basic \"+keybase64;\nglobal.set('g_akey', autentikey);\n\n// Store\nglobal.set('g_networkserver', networkserver);\nglobal.set('g_interface', interface);\nglobal.set('g_application', application);\n\n// Store variable\nglobal.set('g_ip', ip);\nglobal.set('g_tts_topicDownlinkSuffix', tts_topicDownlinkSuffix);\nglobal.set('g_tts_topicUplinkSuffix', tts_topicUplinkSuffix);\nglobal.set('g_chirp_topicDownlinkSuffix', chirp_topicDownlinkSuffix);\nglobal.set('g_chirp_topicUplinkSuffix', chirp_topicUplinkSuffix);\nglobal.set('g_portDownlink', portDownlink);\nglobal.set('g_devPrefix', devPrefix);\nglobal.set('g_defaultValue', defaultvalue);\nglobal.set('g_chirp_apitoken', chirp_apitoken);\n\n// Store BACnet variable\nglobal.set('g_propertyType_PresentValue', \"85\");   // PRESENT_VALUE = \"85\"\nglobal.set('g_ObjectTypeAnalogValue', \"2\");        // ANALOG_VALUE = \"2\"\nglobal.set('g_propertyType_Real', 4)              // REAL = 4\n\n\n// Verification\nif (networkserver != \"chirpstack\" && networkserver != \"tts\") {\n    node.error(\"This Network Server is unknown, choose between 'chirpstack' or 'tts'\", msg);\n}\nif (interface != \"bacnet\" && interface != \"http\") {\n    node.error(\"This interface method is unknown, choose between 'bacnet' or 'http'\", msg);\n}\nif (application != \"roomsimulator\" && application != \"apexdistech\") {\n    node.error(\"This application is unknown, choose between 'roomsimulator' or 'apexdistech'\", msg);\n}\n// The room simulator works with BACnet method only\nif ((application == \"roomsimulator\") && (interface != \"bacnet\")) {\n    node.error(\"The room simulator works with the BACnet method only, you must change the interface with 'bacnet'\");\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 360,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "d84572e75538829c",
        "type": "inject",
        "z": "6d8f4dd34d3c0968",
        "g": "ab13df5c0c447733",
        "name": "trigger auto",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 655,
        "y": 360,
        "wires": [
            [
                "f16acf6db595ce16"
            ]
        ],
        "l": false
    },
    {
        "id": "8301bb284abdeed5",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "Server type",
        "property": "g_networkserver",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "tts",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chirpstack",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3630,
        "y": 400,
        "wires": [
            [
                "93e0cc5a019dce53"
            ],
            [
                "78db7f24896c8102"
            ]
        ]
    },
    {
        "id": "bb18855e646ed641",
        "type": "mqtt out",
        "z": "6d8f4dd34d3c0968",
        "g": "de98406a3e080073",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b652fd442e5e028b",
        "x": 4070,
        "y": 460,
        "wires": []
    },
    {
        "id": "78db7f24896c8102",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "de98406a3e080073",
        "name": "Flushqueue chirpstack",
        "func": "//We include global value from libraries\nvar grpc = global.get('grpc');\nvar device_grpc = global.get('device_grpc');\nvar device_pb = global.get('device_pb');\n\n// This must point to the ChirpStack API interface.\nconst server = \"chirpstack:8080\";\n// The DevEUI for which we want to enqueue the downlink.\nconst devEui = global.get('g_chirp_devEui');\n// The API token (can be obtained through the ChirpStack web-interface).\nconst apiToken = global.get('g_chirp_apitoken');\n\n\n// Create the client for the DeviceService.\nconst deviceService = new device_grpc.DeviceServiceClient(\n    server,\n    grpc.credentials.createInsecure(),\n);\n\n// Create the Metadata object.\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n//Flush downlink queue request\nconst flushReq = new device_pb.FlushDeviceQueueRequest();\nflushReq.setDevEui(devEui);\n\n//Send the request\ndeviceService.flushQueue(flushReq, metadata, (err, resp) => {\n    if (err !== null) {\n    }\n});\n\n//We return the msg that contain the JSON object needed to downlink the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3880,
        "y": 460,
        "wires": [
            [
                "bb18855e646ed641"
            ]
        ]
    },
    {
        "id": "bcbeeaa5130ab58e",
        "type": "delay",
        "z": "6d8f4dd34d3c0968",
        "g": "bf20b209e56c184b",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "9cfc51e02c81cd04",
                "4866b35aa0a1245a"
            ]
        ]
    },
    {
        "id": "a350ba7d5dad9261",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "Server type",
        "property": "g_networkserver",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "tts",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chirpstack",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3330,
        "y": 720,
        "wires": [
            [
                "c9d90c1fa8711f27"
            ],
            [
                "ec9520909e7a04e3"
            ]
        ]
    },
    {
        "id": "ec9520909e7a04e3",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "75c82957c6914b08",
        "name": "Flushqueue chirpstack",
        "func": "//We include global value from libraries\nvar grpc = global.get('grpc');\nvar device_grpc = global.get('device_grpc');\nvar device_pb = global.get('device_pb');\n\n// This must point to the ChirpStack API interface.\nconst server = \"chirpstack:8080\";\n// The DevEUI for which we want to enqueue the downlink.\nconst devEui = global.get('g_chirp_devEui');\n// The API token (can be obtained through the ChirpStack web-interface).\nconst apiToken = global.get('g_chirp_apitoken');\n\n\n// Create the client for the DeviceService.\nconst deviceService = new device_grpc.DeviceServiceClient(\n    server,\n    grpc.credentials.createInsecure(),\n);\n\n// Create the Metadata object.\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n//Flush downlink queue request\nconst flushReq = new device_pb.FlushDeviceQueueRequest();\nflushReq.setDevEui(devEui);\n\n//Send the request\ndeviceService.flushQueue(flushReq, metadata, (err, resp) => {\n    if (err !== null) {\n    }\n});\n\n//We return the msg that contain the JSON object needed to downlink the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 780,
        "wires": [
            [
                "73d1439a22bc2bbe"
            ]
        ]
    },
    {
        "id": "c9d90c1fa8711f27",
        "type": "mqtt out",
        "z": "6d8f4dd34d3c0968",
        "g": "335bd4bd8d05919b",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d015829937bb8848",
        "x": 3550,
        "y": 660,
        "wires": []
    },
    {
        "id": "73d1439a22bc2bbe",
        "type": "mqtt out",
        "z": "6d8f4dd34d3c0968",
        "g": "75c82957c6914b08",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b652fd442e5e028b",
        "x": 3770,
        "y": 780,
        "wires": []
    },
    {
        "id": "9c8cf2eae985a2e5",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "Push JSON MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3590,
        "y": 320,
        "wires": []
    },
    {
        "id": "3eb902813fa56602",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "ca17678c24316aa3",
        "name": "application",
        "property": "g_application",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "apexdistech",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "roomsimulator",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 600,
        "wires": [
            [
                "a703bc63b4fecfba"
            ],
            [
                "f6b13807e69d2846",
                "409bcba310b9a78a"
            ]
        ]
    },
    {
        "id": "bf74b0f1b23e70ac",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "compare valve / controler setpoint",
        "property": "payload.values[0].value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "g_valvesetpoint",
                "vt": "global"
            },
            {
                "t": "eq",
                "v": "g_valvesetpoint",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2360,
        "y": 1100,
        "wires": [
            [
                "65031ccc2f06e0fc",
                "fb056b39aaa705a8"
            ],
            [
                "223e20ed37128222",
                "729fc0e83c253a00"
            ]
        ]
    },
    {
        "id": "223e20ed37128222",
        "type": "subflow:bc3747d8d2818125",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "",
        "x": 2650,
        "y": 1140,
        "wires": []
    },
    {
        "id": "06b064b489aaccbb",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "Push JSON MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 980,
        "wires": []
    },
    {
        "id": "8dad14fda06315b6",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "1d640568402dc278",
        "name": "Write valve temperature",
        "func": "//get value from the input\nlet value;\nif (global.get('g_networkserver') == \"tts\") {\n    value = msg.payload.uplink_message.decoded_payload.temperature;\n}\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    value = msg.payload.object.temperature;\n}\nelse {\n    value = null;\n}\n\nvar changeWrite = {\n    \"payload\": {\n        \"deviceIPAddress\": global.get('g_ip'),\n        \"objectId\": {\n            \"type\": global.get('g_ObjectTypeAnalogValue'),\n            \"instance\": global.get('g_AV2_valvetemperature')\n        },\n        \"propertyId\": global.get('g_propertyType_PresentValue'),\n        \"values\":[\n            {\n                \"type\":global.get('g_propertyType_Real'),\n                \"value\": value\n            }\n        ],\n        \"options\": {}\n    }\n};\nreturn changeWrite;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1060,
        "wires": [
            [
                "a18e6b6d389ed7cb",
                "eab7e3b7ab2afc10"
            ]
        ]
    },
    {
        "id": "a18e6b6d389ed7cb",
        "type": "BACnet-Write",
        "z": "6d8f4dd34d3c0968",
        "g": "1d640568402dc278",
        "name": "BACnet WRITE",
        "objectType": "0",
        "instance": "7984f7dd585788a9",
        "valueTag": "0",
        "valueValue": "",
        "propertyId": "0",
        "priority": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleWrite": false,
        "x": 1560,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f6b13807e69d2846",
        "type": "delay",
        "z": "6d8f4dd34d3c0968",
        "g": "1d640568402dc278",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 1060,
        "wires": [
            [
                "8dad14fda06315b6",
                "4e1f58811f19c931"
            ]
        ]
    },
    {
        "id": "4e1f58811f19c931",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "1d640568402dc278",
        "name": "Write valve setpoint",
        "func": "//get value from the input\nlet value;\nif (global.get('g_networkserver') == \"tts\") {\n    value = msg.payload.uplink_message.decoded_payload.setpoint;\n}\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    value = msg.payload.object.setpoint;\n}\nelse {\n    value = null;\n}\n\nvar changeWrite = {\n    \"payload\": {\n        \"deviceIPAddress\": global.get('g_ip'),\n        \"objectId\": {\n            \"type\": global.get('g_ObjectTypeAnalogValue'),\n            \"instance\": global.get('g_AV1_valvesetpoint')\n        },\n        \"propertyId\": global.get('g_propertyType_PresentValue'),\n        \"values\": [\n            {\n                \"type\": global.get('g_propertyType_Real'),\n                \"value\": value\n            }\n        ],\n        \"options\": {}\n    }\n};\nnode.warn(\"Ecriture de la temperature et du setpoint dans nos objets BACnet\");\nreturn changeWrite;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1100,
        "wires": [
            [
                "5e9fd5c64910baf0",
                "eab7e3b7ab2afc10"
            ]
        ]
    },
    {
        "id": "5e9fd5c64910baf0",
        "type": "BACnet-Write",
        "z": "6d8f4dd34d3c0968",
        "g": "1d640568402dc278",
        "name": "BACnet WRITE",
        "objectType": "0",
        "instance": "7984f7dd585788a9",
        "valueTag": "0",
        "valueValue": "",
        "propertyId": "0",
        "priority": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleWrite": false,
        "x": 1560,
        "y": 1100,
        "wires": [
            [
                "dad3b556821c3f1b"
            ]
        ]
    },
    {
        "id": "dad3b556821c3f1b",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "231f17d1360ada6d",
        "name": "Read controler setpoint",
        "func": "var changeRead = {\n    \"payload\": {\n        \"deviceIPAddress\": global.get('g_ip'),\n        \"objectId\": {\n            \"type\": global.get('g_ObjectTypeAnalogValue'),\n            \"instance\": global.get('g_AV3_controlersetpoint')\n        },\n        \"propertyId\": global.get('g_propertyType_PresentValue'),\n        \"options\": {}\n    }\n};\nnode.warn(\"RÃ©cupÃ©ration du controler setpoint\");\nreturn changeRead;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1100,
        "wires": [
            [
                "a4b37139d76c75a4"
            ]
        ]
    },
    {
        "id": "a4b37139d76c75a4",
        "type": "BACnet-Read",
        "z": "6d8f4dd34d3c0968",
        "g": "231f17d1360ada6d",
        "name": "BACnet READ",
        "objectType": "0",
        "instance": "7984f7dd585788a9",
        "propertyId": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleRead": false,
        "x": 2080,
        "y": 1100,
        "wires": [
            [
                "bf74b0f1b23e70ac",
                "f284deb4b7a72166"
            ]
        ]
    },
    {
        "id": "02ac2e54245339a7",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "7297e49e8a120a5c",
        "name": "Creating du JSON",
        "func": "let serv = global.get('g_networkserver');\n\nvar json = {};\n//downlink for tts\nif (global.get('g_networkserver')==\"tts\"){\n    json = {\n        \"topic\": global.get('g_topicDownlink'),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": global.get('g_portDownlink'),\n                    \"frm_payload\": msg.payload,\n                    \"priority\": \"NORMAL\"\n                }\n            ]\n        }\n    };\n}\n\n//downlink for chirpstack\nelse if (global.get('g_networkserver') == \"chirpstack\") {\n    json = {\n        \"topic\": global.get('g_topicDownlink'),\n        \"payload\": {\n            \"devEui\": global.get('g_chirp_devEui'),\n            \"confirmed\": false,\n            \"fPort\": global.get('g_portDownlink'),\n            \"data\": msg.payload\n        }\n    };\n}\n\nreturn json;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 1060,
        "wires": [
            [
                "06b064b489aaccbb",
                "6c5aed84568084c1"
            ]
        ]
    },
    {
        "id": "f5a5b22958e2eda9",
        "type": "base64",
        "z": "6d8f4dd34d3c0968",
        "g": "7297e49e8a120a5c",
        "name": "Encodeur Base64",
        "action": "str",
        "property": "payload",
        "x": 2910,
        "y": 1060,
        "wires": [
            [
                "02ac2e54245339a7"
            ]
        ]
    },
    {
        "id": "65031ccc2f06e0fc",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "7297e49e8a120a5c",
        "name": "Creating buffer to encode",
        "func": "//The base64 node need a Buffer type to encode properly\nlet buffervalue = Buffer.from([msg.payload.values[0].value]);\n\nvar payload64 = {\n    \"payload\": buffervalue\n};\nnode.warn(\"'valve setpoint' et 'controler setpoint' sont diffÃ©rents, on envoie un downlink\");\nreturn payload64;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 1060,
        "wires": [
            [
                "f5a5b22958e2eda9"
            ]
        ]
    },
    {
        "id": "6c5aed84568084c1",
        "type": "switch",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "Server type",
        "property": "g_networkserver",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "tts",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chirpstack",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3330,
        "y": 1060,
        "wires": [
            [
                "ad603adc6e67542c"
            ],
            [
                "9b5837d03a0cdbdf"
            ]
        ]
    },
    {
        "id": "ad603adc6e67542c",
        "type": "mqtt out",
        "z": "6d8f4dd34d3c0968",
        "g": "573c486199f582ea",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d015829937bb8848",
        "x": 3550,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f1252defa33c0f31",
        "type": "mqtt out",
        "z": "6d8f4dd34d3c0968",
        "g": "b9dc96c245a1f3dd",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b652fd442e5e028b",
        "x": 3770,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9b5837d03a0cdbdf",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "b9dc96c245a1f3dd",
        "name": "Flushqueue chirpstack",
        "func": "//We include global value from libraries\nvar grpc = global.get('grpc');\nvar device_grpc = global.get('device_grpc');\nvar device_pb = global.get('device_pb');\n\n// This must point to the ChirpStack API interface.\nconst server = \"chirpstack:8080\";\n// The DevEUI for which we want to enqueue the downlink.\nconst devEui = global.get('g_chirp_devEui');\n// The API token (can be obtained through the ChirpStack web-interface).\nconst apiToken = global.get('g_chirp_apitoken');\n\n\n// Create the client for the DeviceService.\nconst deviceService = new device_grpc.DeviceServiceClient(\n    server,\n    grpc.credentials.createInsecure(),\n);\n\n// Create the Metadata object.\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n//Flush downlink queue request\nconst flushReq = new device_pb.FlushDeviceQueueRequest();\nflushReq.setDevEui(devEui);\n\n//Send the request\ndeviceService.flushQueue(flushReq, metadata, (err, resp) => {\n    if (err !== null) {\n    }\n});\n\n//We return the msg that contain the JSON object needed to downlink the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 1120,
        "wires": [
            [
                "f1252defa33c0f31"
            ]
        ]
    },
    {
        "id": "409bcba310b9a78a",
        "type": "function",
        "z": "6d8f4dd34d3c0968",
        "g": "342b312ee2628ed5",
        "name": "Change settings",
        "func": "//For the room simulator, instances will always be the same\nglobal.set('g_AV1_valvesetpoint', \"1\");\nglobal.set('g_AV2_valvetemperature', \"2\");\nglobal.set('g_AV3_controlersetpoint', \"3\");\n\nvar instance = {\n    \"valvesetpoint\": global.get('g_AV1_valvesetpoint'),\n    \"valvetemperature\": global.get('g_AV2_valvetemperature'),\n    \"controlersetpoint\": global.get('g_AV3_controlersetpoint')\n};\nreturn instance;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1200,
        "wires": [
            [
                "a8bc415f09eed42f"
            ]
        ]
    },
    {
        "id": "a8bc415f09eed42f",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "342b312ee2628ed5",
        "name": "debug instance",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1200,
        "wires": []
    },
    {
        "id": "eab7e3b7ab2afc10",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "debug bacnet write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 980,
        "wires": []
    },
    {
        "id": "f284deb4b7a72166",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "debug bacnet read",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 1000,
        "wires": []
    },
    {
        "id": "729fc0e83c253a00",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "setpoint ==",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 1200,
        "wires": []
    },
    {
        "id": "fb056b39aaa705a8",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "3b6b26d985df825b",
        "name": "setpoint !=",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 980,
        "wires": []
    },
    {
        "id": "1f5a604bf63586be",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "setpoint !=",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 640,
        "wires": []
    },
    {
        "id": "36cfa1fcde609111",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "setpoint ==",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 860,
        "wires": []
    },
    {
        "id": "2dc9505f0fe9848a",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "setpoint !=",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 300,
        "wires": []
    },
    {
        "id": "ca3b22cd07410a52",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "setpoint ==",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 520,
        "wires": []
    },
    {
        "id": "bb9b71f30b74b7c3",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "debug bacnet read",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 660,
        "wires": []
    },
    {
        "id": "f1d9eee2fd1c3844",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "debug http get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 520,
        "wires": []
    },
    {
        "id": "2c96e9bf561e4cfa",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "debug http create",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 240,
        "wires": []
    },
    {
        "id": "33fe74da7b07405e",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "427c6c6436a2584b",
        "name": "debug bacnet write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 640,
        "wires": []
    },
    {
        "id": "ffa2d178474c6fb6",
        "type": "debug",
        "z": "6d8f4dd34d3c0968",
        "g": "d87567def4b1e622",
        "name": "debug http post",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 260,
        "wires": []
    },
    {
        "id": "b652fd442e5e028b",
        "type": "mqtt-broker",
        "name": "Chirp",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e133531e8c058541",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "d015829937bb8848",
        "type": "mqtt-broker",
        "name": "ttn",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7984f7dd585788a9",
        "type": "BACnet-Instance",
        "name": "vide",
        "instanceAddress": ""
    },
    {
        "id": "a0609a711569d7f5",
        "type": "BACnet-Device",
        "name": "vide",
        "deviceAddress": ""
    },
    {
        "id": "e0bf099a.ee8468",
        "type": "BACnet-Client",
        "name": "node red",
        "adpuTimeout": "100",
        "port": "",
        "interface": "192.168.1.0",
        "broadcastAddress": "0.0.0.255"
    }
]
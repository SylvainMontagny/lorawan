{
   "panels": [
      {
         "datasource": {
            "type": "datasource",
            "uid": "-- Mixed --"
         },
         "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
         },
         "id": 1,
         "options": {
            "code": {
               "language": "plaintext",
               "showLineNumbers": false,
               "showMiniMap": false
            },
            "content": "# Temperature and Humidity in developpment\nTemperature and humidity data caught by LHT65 sensors at Technolac Campus.\n\nThis is an automatically generated dashboard.",
            "mode": "markdown"
         },
         "pluginVersion": "v11.4.0",
         "title": "",
         "type": "text"
      },
      {
         "datasource": {
            "type": "influxdb",
            "uid": "deivf3q0qa1hca"
         },
         "fieldConfig": {
            "defaults": {
               "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                     "legend": false,
                     "tooltip": false,
                     "viz": false
                  },
                  "insertNulls": 3600000,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "scaleDistribution": {
                     "type": "linear"
                  },
                  "showPoints": "never",
                  "spanNulls": false,
                  "stacking": {
                     "group": "A",
                     "mode": "none"
                  },
                  "thresholdsStyle": {
                     "mode": "off"
                  }
               },
               "mappings": [ ]
            },
            "overrides": [
               {
                  "matcher": {
                     "id": "byFrameRefID",
                     "options": "A"
                  },
                  "properties": [
                     {
                        "id": "unit",
                        "value": "celsius"
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byFrameRefID",
                     "options": "B"
                  },
                  "properties": [
                     {
                        "id": "unit",
                        "value": "percent"
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byFrameRefID",
                     "options": "C"
                  },
                  "properties": [
                     {
                        "id": "unit",
                        "value": "ppm"
                     }
                  ]
               },
               {
                  "matcher": {
                     "id": "byName",
                     "options": "Time"
                  },
                  "properties": [
                     {
                        "id": "unit",
                        "value": "time:LLLL"
                     }
                  ]
               }
            ]
         },
         "gridPos": {
            "h": 18,
            "w": 24,
            "x": 0,
            "y": 3
         },
         "id": 2,
         "maxPerRow": 4,
         "options": {
            "legend": {
               "calcs": [ ],
               "displayMode": "list",
               "placement": "right",
               "showLegend": true
            },
            "tooltip": {
               "maxHeight": 600,
               "mode": "single",
               "sort": "asc"
            }
         },
         "pluginVersion": "v11.4.0",
         "repeat": "MEASUREMENT",
         "repeatDirection": "h",
         "targets": [
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "query": "import \"strings\"\r\n\r\nfrom(bucket: \"iot-platform\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"${MEASUREMENT}\" and \"${MEASUREMENT}\" == \"TempC_SHT\")\r\n  |> filter(fn: (r) => exists r[\"site\"] and contains(set: ${CAMPUS:json}, value: strings.toLower(v: r[\"site\"])))\r\n  |> filter(fn: (r) => (exists r[\"batiment\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"batiment\"]))) or\r\n    (exists r[\"building\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"building\"]))))\r\n  |> filter(fn: (r) => (exists r[\"salle\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"salle\"]))) or\r\n    (exists r[\"room\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"room\"]))))\r\n  |> keep(columns: [\"_value\", \"_time\", \"batiment\", \"salle\", \"site\"])  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n",
               "refId": "A"
            },
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "query": "import \"strings\"\r\n\r\nfrom(bucket: \"iot-platform\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"${MEASUREMENT}\" and \"${MEASUREMENT}\" == \"Hum_SHT\")\r\n  |> filter(fn: (r) => exists r[\"site\"] and contains(set: ${CAMPUS:json}, value: strings.toLower(v: r[\"site\"])))\r\n  |> filter(fn: (r) => (exists r[\"batiment\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"batiment\"]))) or\r\n    (exists r[\"building\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"building\"]))))\r\n  |> filter(fn: (r) => (exists r[\"salle\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"salle\"]))) or\r\n    (exists r[\"room\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"room\"]))))\r\n  |> keep(columns: [\"_value\", \"_time\", \"batiment\", \"salle\", \"site\"])  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n",
               "refId": "B"
            },
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "query": "import \"strings\"\r\n\r\nfrom(bucket: \"iot-platform\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"value\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"${MEASUREMENT}\" and \"${MEASUREMENT}\" == \"Co2_SHT\")\r\n  |> filter(fn: (r) => exists r[\"site\"] and contains(set: ${CAMPUS:json}, value: strings.toLower(v: r[\"site\"])))\r\n  |> filter(fn: (r) => (exists r[\"batiment\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"batiment\"]))) or\r\n    (exists r[\"building\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"building\"]))))\r\n  |> filter(fn: (r) => (exists r[\"salle\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"salle\"]))) or\r\n    (exists r[\"room\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"room\"]))))\r\n  |> keep(columns: [\"_value\", \"_time\", \"batiment\", \"salle\", \"site\"])  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n",
               "refId": "C"
            }
         ],
         "title": "${MEASUREMENT} of ${ROOM}",
         "transformations": [
            {
               "id": "renameByRegex",
               "options": {
                  "regex": ".*batiment=\"(.*?)\".*salle=\"(.*?)\".*site=\"(.*?)\".*",
                  "renamePattern": "$1 - $2"
               }
            }
         ],
         "transparent": true,
         "type": "timeseries"
      },
      {
         "collapsed": true,
         "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 21
         },
         "id": 3,
         "panels": [
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "fieldConfig": {
                  "defaults": {
                     "color": {
                        "mode": "palette-classic"
                     },
                     "custom": {
                        "axisBorderShow": false,
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                           "legend": false,
                           "tooltip": false,
                           "viz": false
                        },
                        "insertNulls": 3600000,
                        "lineInterpolation": "linear",
                        "lineStyle": {
                           "fill": "solid"
                        },
                        "scaleDistribution": {
                           "type": "linear"
                        },
                        "showPoints": "never",
                        "spanNulls": false,
                        "stacking": {
                           "group": "A",
                           "mode": "none"
                        },
                        "thresholdsStyle": {
                           "mode": "off"
                        }
                     },
                     "mappings": [ ],
                     "thresholds": {
                        "mode": "absolute",
                        "steps": [
                           {
                              "color": "green"
                           },
                           {
                              "color": "red",
                              "value": 30
                           }
                        ]
                     }
                  },
                  "overrides": [
                     {
                        "matcher": {
                           "id": "byFrameRefID",
                           "options": "A"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "celsius"
                           }
                        ]
                     },
                     {
                        "matcher": {
                           "id": "byFrameRefID",
                           "options": "B"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "percent"
                           }
                        ]
                     },
                     {
                        "matcher": {
                           "id": "byFrameRefID",
                           "options": "C"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "ppm"
                           }
                        ]
                     },
                     {
                        "matcher": {
                           "id": "byName",
                           "options": "Time"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "time:LLLL"
                           }
                        ]
                     }
                  ]
               },
               "gridPos": {
                  "h": 7,
                  "w": 24,
                  "x": 0,
                  "y": 22
               },
               "id": 4,
               "options": {
                  "legend": {
                     "calcs": [ ],
                     "displayMode": "list",
                     "placement": "bottom",
                     "showLegend": true
                  },
                  "tooltip": {
                     "maxHeight": 600,
                     "mode": "single",
                     "sort": "none"
                  }
               },
               "pluginVersion": "v11.4.0",
               "repeat": "ROOM",
               "repeatDirection": "v",
               "targets": [
                  {
                     "datasource": {
                        "type": "influxdb",
                        "uid": "deivf3q0qa1hca"
                     },
                     "query": "import \"strings\"\r\n\r\nmeasurement = strings.split(v: \"${MEASUREMENT}\", t: \" \")[0]\r\n\r\nfrom(bucket: \"iot-platform\")\r\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n|> filter(fn: (r) => r[\"_measurement\"] == \"value\")\r\n|> filter(fn: (r) => r[\"_field\"] == measurement and measurement == \"TempC_SHT\")\r\n|> filter(fn: (r) => exists r[\"site\"] and contains(value: strings.toLower(v: r.site), set: ${CAMPUS:json}))\r\n|> filter(fn: (r) => exists r[\"batiment\"] and contains(value: strings.toLower(v: r.batiment), set: ${BATIMENT:json}))\r\n|> filter(fn: (r) => exists r[\"salle\"] and (strings.toLower(v: r.salle) == \"${ROOM}\"))\r\n|> keep(columns: [\"_value\", \"_time\", \"batiment\", \"salle\", \"site\"])|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n|> yield(name: \"${MEASUREMENT}\")\r\n",
                     "refId": "A"
                  },
                  {
                     "datasource": {
                        "type": "influxdb",
                        "uid": "deivf3q0qa1hca"
                     },
                     "query": "import \"strings\"\r\n\r\nmeasurement = strings.split(v: \"${MEASUREMENT}\", t: \" \")[0]\r\n\r\nfrom(bucket: \"iot-platform\")\r\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n|> filter(fn: (r) => r[\"_measurement\"] == \"value\")\r\n|> filter(fn: (r) => r[\"_field\"] == measurement and measurement == \"Hum_SHT\")\r\n|> filter(fn: (r) => exists r[\"site\"] and contains(value: strings.toLower(v: r.site), set: ${CAMPUS:json}))\r\n|> filter(fn: (r) => exists r[\"batiment\"] and contains(value: strings.toLower(v: r.batiment), set: ${BATIMENT:json}))\r\n|> filter(fn: (r) => exists r[\"salle\"] and (strings.toLower(v: r.salle) == \"${ROOM}\"))\r\n|> keep(columns: [\"_value\", \"_time\", \"batiment\", \"salle\", \"site\"])|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n|> yield(name: \"${MEASUREMENT}\")\r\n",
                     "refId": "B"
                  },
                  {
                     "datasource": {
                        "type": "influxdb",
                        "uid": "deivf3q0qa1hca"
                     },
                     "query": "import \"strings\"\r\n\r\nmeasurement = strings.split(v: \"${MEASUREMENT}\", t: \" \")[0]\r\n\r\nfrom(bucket: \"iot-platform\")\r\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n|> filter(fn: (r) => r[\"_measurement\"] == \"value\")\r\n|> filter(fn: (r) => r[\"_field\"] == measurement and measurement == \"Co2_SHT\")\r\n|> filter(fn: (r) => exists r[\"site\"] and contains(value: strings.toLower(v: r.site), set: ${CAMPUS:json}))\r\n|> filter(fn: (r) => exists r[\"batiment\"] and contains(value: strings.toLower(v: r.batiment), set: ${BATIMENT:json}))\r\n|> filter(fn: (r) => exists r[\"salle\"] and (strings.toLower(v: r.salle) == \"${ROOM}\"))\r\n|> keep(columns: [\"_value\", \"_time\", \"batiment\", \"salle\", \"site\"])|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n|> yield(name: \"${MEASUREMENT}\")\r\n",
                     "refId": "C"
                  }
               ],
               "title": "${MEASUREMENT} of ${ROOM}",
               "transformations": [
                  {
                     "id": "renameByRegex",
                     "options": {
                        "regex": ".*batiment=\"(.*?)\".*salle=\"(.*?)\".*site=\"(.*?)\".*",
                        "renamePattern": "$2 - $1 - $3"
                     }
                  }
               ],
               "transparent": true,
               "type": "timeseries"
            }
         ],
         "title": "Single View",
         "type": "row"
      },
      {
         "collapsed": true,
         "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 22
         },
         "id": 5,
         "panels": [
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "fieldConfig": {
                  "defaults": {
                     "color": {
                        "mode": "palette-classic"
                     },
                     "custom": {
                        "axisBorderShow": false,
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                           "legend": false,
                           "tooltip": false,
                           "viz": false
                        },
                        "insertNulls": 3600000,
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                           "linearThreshold": 0,
                           "type": "linear"
                        },
                        "showPoints": "never",
                        "spanNulls": false,
                        "stacking": {
                           "group": "A",
                           "mode": "none"
                        },
                        "thresholdsStyle": {
                           "mode": "off"
                        }
                     },
                     "mappings": [ ],
                     "thresholds": {
                        "mode": "absolute",
                        "steps": [
                           {
                              "color": "green",
                              "value": null
                           },
                           {
                              "color": "red",
                              "value": 80
                           }
                        ]
                     }
                  },
                  "overrides": [
                     {
                        "matcher": {
                           "id": "byName",
                           "options": "rssi"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "dBm"
                           }
                        ]
                     },
                     {
                        "matcher": {
                           "id": "byName",
                           "options": "Time"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "time:LLLL"
                           }
                        ]
                     }
                  ]
               },
               "gridPos": {
                  "h": 18,
                  "w": 24,
                  "x": 0,
                  "y": 23
               },
               "id": 6,
               "options": {
                  "legend": {
                     "calcs": [
                        "min",
                        "mean",
                        "variance"
                     ],
                     "displayMode": "table",
                     "placement": "right",
                     "showLegend": true
                  },
                  "tooltip": {
                     "maxHeight": 600,
                     "mode": "single",
                     "sort": "none"
                  }
               },
               "pluginVersion": "v11.4.0",
               "targets": [
                  {
                     "datasource": {
                        "type": "influxdb",
                        "uid": "deivf3q0qa1hca"
                     },
                     "query": "import \"strings\"\n\nfrom(bucket: \"iot-platform\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"value\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rssi\")\n  |> filter(fn: (r) => exists r[\"site\"] and contains(set: ${CAMPUS:json}, value: strings.toLower(v: r[\"site\"])))\n  |> filter(fn: (r) => (exists r[\"batiment\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"batiment\"]))) or\n    (exists r[\"building\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"building\"]))))\n  |> filter(fn: (r) => (exists r[\"salle\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"salle\"]))) or\n    (exists r[\"room\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"room\"]))))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\", \"batiment\", \"salle\", \"site\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
                     "refId": "A"
                  }
               ],
               "title": "RSSI",
               "transformations": [
                  {
                     "id": "renameByRegex",
                     "options": {
                        "regex": ".*batiment=\"(.*?)\".*salle=\"(.*?)\".*site=\"(.*?)\".*",
                        "renamePattern": "$3- $1 - $2"
                     }
                  }
               ],
               "type": "timeseries"
            },
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "fieldConfig": {
                  "defaults": {
                     "color": {
                        "mode": "palette-classic"
                     },
                     "custom": {
                        "axisBorderShow": false,
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                           "legend": false,
                           "tooltip": false,
                           "viz": false
                        },
                        "insertNulls": 3600000,
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                           "type": "linear"
                        },
                        "showPoints": "never",
                        "spanNulls": false,
                        "stacking": {
                           "group": "A",
                           "mode": "none"
                        },
                        "thresholdsStyle": {
                           "mode": "off"
                        }
                     },
                     "mappings": [ ],
                     "thresholds": {
                        "mode": "absolute",
                        "steps": [
                           {
                              "color": "green",
                              "value": null
                           },
                           {
                              "color": "red",
                              "value": 80
                           }
                        ]
                     }
                  },
                  "overrides": [
                     {
                        "matcher": {
                           "id": "byType",
                           "options": "number"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "dB"
                           }
                        ]
                     },
                     {
                        "matcher": {
                           "id": "byName",
                           "options": "Time"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "time:LLLL"
                           }
                        ]
                     }
                  ]
               },
               "gridPos": {
                  "h": 15,
                  "w": 24,
                  "x": 0,
                  "y": 41
               },
               "id": 7,
               "options": {
                  "legend": {
                     "calcs": [
                        "min",
                        "max",
                        "mean",
                        "variance"
                     ],
                     "displayMode": "table",
                     "placement": "right",
                     "showLegend": true
                  },
                  "tooltip": {
                     "maxHeight": 600,
                     "mode": "single",
                     "sort": "none"
                  }
               },
               "pluginVersion": "v11.4.0",
               "targets": [
                  {
                     "datasource": {
                        "type": "influxdb",
                        "uid": "deivf3q0qa1hca"
                     },
                     "query": "import \"strings\"\n\nfrom(bucket: \"iot-platform\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"value\")\n  |> filter(fn: (r) => r[\"_field\"] == \"snr\")\n  |> filter(fn: (r) => exists r[\"site\"] and contains(set: ${CAMPUS:json}, value: strings.toLower(v: r[\"site\"])))\n  |> filter(fn: (r) => (exists r[\"batiment\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"batiment\"]))) or (exists r[\"building\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"building\"]))))\n  |> filter(fn: (r) => (exists r[\"salle\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"salle\"]))) or (exists r[\"room\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"room\"]))))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\", \"batiment\", \"salle\", \"site\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
                     "refId": "A"
                  }
               ],
               "title": "SNR",
               "transformations": [
                  {
                     "id": "renameByRegex",
                     "options": {
                        "regex": ".*batiment=\"(.*?)\".*salle=\"(.*?)\".*site=\"(.*?)\".*",
                        "renamePattern": "$3- $1 - $2"
                     }
                  }
               ],
               "type": "timeseries"
            },
            {
               "datasource": {
                  "type": "influxdb",
                  "uid": "deivf3q0qa1hca"
               },
               "fieldConfig": {
                  "defaults": {
                     "color": {
                        "mode": "palette-classic"
                     },
                     "custom": {
                        "axisBorderShow": false,
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "axisSoftMax": 12,
                        "axisSoftMin": 7,
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                           "legend": false,
                           "tooltip": false,
                           "viz": false
                        },
                        "insertNulls": false,
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                           "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                           "group": "A",
                           "mode": "none"
                        },
                        "thresholdsStyle": {
                           "mode": "off"
                        }
                     },
                     "mappings": [ ],
                     "thresholds": {
                        "mode": "absolute",
                        "steps": [
                           {
                              "color": "green",
                              "value": null
                           },
                           {
                              "color": "red",
                              "value": 80
                           }
                        ]
                     }
                  },
                  "overrides": [
                     {
                        "matcher": {
                           "id": "byName",
                           "options": "Time"
                        },
                        "properties": [
                           {
                              "id": "unit",
                              "value": "time:LLLL"
                           }
                        ]
                     }
                  ]
               },
               "gridPos": {
                  "h": 10,
                  "w": 24,
                  "x": 0,
                  "y": 56
               },
               "id": 8,
               "options": {
                  "legend": {
                     "calcs": [
                        "min",
                        "mean",
                        "variance"
                     ],
                     "displayMode": "table",
                     "placement": "right",
                     "showLegend": true
                  },
                  "tooltip": {
                     "maxHeight": 600,
                     "mode": "single",
                     "sort": "none"
                  }
               },
               "pluginVersion": "v11.4.0",
               "targets": [
                  {
                     "datasource": {
                        "type": "influxdb",
                        "uid": "deivf3q0qa1hca"
                     },
                     "query": "import \"strings\"\n\nfrom(bucket: \"iot-platform\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"value\")\n  |> filter(fn: (r) => r[\"_field\"] == \"modulation_lora_spreadingFactor\")\n  |> filter(fn: (r) => exists r[\"site\"] and contains(set: ${CAMPUS:json}, value: strings.toLower(v: r[\"site\"])))\n  |> filter(fn: (r) => (exists r[\"batiment\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"batiment\"]))) or (exists r[\"building\"] and contains(set: ${BATIMENT:json}, value: strings.toLower(v: r[\"building\"]))))\n  |> filter(fn: (r) => (exists r[\"salle\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"salle\"]))) or (exists r[\"room\"] and contains(set: ${ROOM:json}, value: strings.toLower(v: r[\"room\"]))))\n  |> keep(columns: [\"_value\", \"_time\", \"_field\", \"batiment\", \"salle\", \"site\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
                     "refId": "A"
                  }
               ],
               "title": "Spreading Factor",
               "transformations": [
                  {
                     "id": "renameByRegex",
                     "options": {
                        "regex": ".*batiment=\"(.*?)\".*salle=\"(.*?)\".*site=\"(.*?)\".*",
                        "renamePattern": "$3- $1 - $2"
                     }
                  }
               ],
               "type": "timeseries"
            }
         ],
         "title": "Advanced Visualisations",
         "type": "row"
      }
   ],
   "refresh": "10m",
   "schemaVersion": 39,
   "tags": [
      "LHT65",
      "Temperature",
      "Humidity",
      "Generated"
   ],
   "templating": {
      "list": [
         {
            "current": {
               "selected": false,
               "text": "Temperature",
               "value": "TempC_SHT"
            },
            "hide": 0,
            "includeAll": false,
            "multi": false,
            "name": "MEASUREMENT",
            "options": [
               {
                  "selected": true,
                  "text": "Temperature",
                  "value": "TempC_SHT"
               },
               {
                  "selected": false,
                  "text": "Humidity",
                  "value": "Hum_SHT"
               },
               {
                  "selected": false,
                  "text": "Air Quality",
                  "value": "Co2_SHT"
               }
            ],
            "query": "Temperature : TempC_SHT,Humidity : Hum_SHT,Air Quality : Co2_SHT",
            "type": "custom"
         },
         {
            "current": {
               "selected": false,
               "text": [
                  "All"
               ],
               "value": [
                  "All"
               ]
            },
            "datasource": {
               "type": "influxdb",
               "uid": "deivf3q0qa1hca"
            },
            "includeAll": true,
            "multi": true,
            "name": "CAMPUS",
            "query": "import \"influxdata/influxdb/schema\"\r\nimport \"strings\"\r\nimport \"array\"\r\n \r\nsites = schema.tagValues(\r\n  bucket: \"iot-platform\",\r\n  tag: \"site\",\r\n  predicate: (r) => r._field == \"${MEASUREMENT}\",\r\n  start: v.timeRangeStart\r\n)\r\n|> map(fn: (r) => ({ r with site: strings.toLower(v: r._value) }))\r\n|> distinct(column: \"site\")\r\n\r\ndefault = array.from(rows: [{\"_value\": \"none\"}])\r\n\r\nunion(tables: [sites, default])\r\n",
            "refresh": 1,
            "sort": 1,
            "type": "query"
         },
         {
            "current": {
               "selected": false,
               "text": [
                  "All"
               ],
               "value": [
                  "All"
               ]
            },
            "datasource": {
               "type": "influxdb",
               "uid": "deivf3q0qa1hca"
            },
            "includeAll": true,
            "multi": true,
            "name": "BATIMENT",
            "query": "import \"influxdata/influxdb/schema\"\r\nimport \"strings\"\r\nimport \"array\"\r\n\r\nbuildings = schema.tagValues(\r\n  bucket: \"iot-platform\",\r\n  tag: \"batiment\",\r\n  predicate: (r) => r._field == \"${MEASUREMENT}\"\r\n    and exists r[\"site\"]\r\n    and contains(value: strings.toLower(v:r[\"site\"]), set: ${CAMPUS:json}),\r\n  start: v.timeRangeStart\r\n)\r\n|> map(fn: (r) => ({ r with building: strings.toLower(v: r._value) }))\r\n|> distinct(column: \"building\")\r\n\r\ndefault = array.from(rows: [{\"_value\": \"none\"}])\r\n\r\nunion(tables: [buildings, default])",
            "refresh": 1,
            "sort": 1,
            "type": "query"
         },
         {
            "current": {
               "selected": false,
               "text": [
                  "All"
               ],
               "value": [
                  "All"
               ]
            },
            "datasource": {
               "type": "influxdb",
               "uid": "deivf3q0qa1hca"
            },
            "includeAll": true,
            "multi": true,
            "name": "ROOM",
            "query": "import \"influxdata/influxdb/schema\"\r\nimport \"strings\"\r\nimport \"array\"\r\n\r\nrooms = schema.tagValues(\r\n  bucket: \"iot-platform\",\r\n  tag: \"salle\",\r\n  predicate: (r) => \r\n    r._field == \"${MEASUREMENT}\"\r\n    and exists r[\"site\"]\r\n    and exists r[\"batiment\"]\r\n    and contains(value: strings.toLower(v: r[\"site\"]), set: ${CAMPUS:json}) \r\n    and contains(value: strings.toLower(v: r[\"batiment\"]), set: ${BATIMENT:json}),\r\n  start: v.timeRangeStart\r\n)\r\n|> map(fn: (r) => ({ r with room: strings.toLower(v: r._value) }))\r\n|> distinct(column: \"room\")\r\n\r\ndefault = array.from(rows: [{\"_value\": \"none\"}])\r\n\r\nunion(tables: [rooms, default])\r\n",
            "refresh": 1,
            "sort": 1,
            "type": "query"
         }
      ]
   },
   "time": {
      "from": "now-7d",
      "to": "now"
   },
   "timepicker": {
      "time_options": [
         "1h",
         "6h",
         "12h",
         "24h",
         "2d",
         "7d",
         "30d",
         "90d",
         "180d",
         "1y",
         "2y"
      ]
   },
   "timezone": "browser",
   "title": "Température et humidité DEV",
   "weekStart": "monday"
}
